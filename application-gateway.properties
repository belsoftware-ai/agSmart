server.port=8084
spring.application.name=ApiGateway-Application

eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true


 #service implementation inventory with apiGateway
spring.cloud.gateway.routes[0].id=BE-AGSmartInventory-Application
spring.cloud.gateway.routes[0].uri=lb://BE-AGSmartInventory-Application
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/**
#spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

#service implementation Farmowner with apiGateway
spring.cloud.gateway.routes[1].id=BE-AGSmartAccounts-Application
spring.cloud.gateway.routes[1].uri=lb://BE-AGSmartAccounts-Application
spring.cloud.gateway.routes[1].predicates[0]=Path=/acc/api/**
#spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1


#service implementation Asset with apiGateway
spring.cloud.gateway.routes[2].id=BE-AGSmartAsset-Application
spring.cloud.gateway.routes[2].uri=lb://BE-AGSmartAsset-Application
spring.cloud.gateway.routes[2].predicates[0]=Path=/asset/**
#spring.cloud.gateway.routes[2].filters[0]=StripPrefix=1

#service implementation Communication with apiGateway
spring.cloud.gateway.routes[3].id=BE-AGSmartCommunication-Application
spring.cloud.gateway.routes[3].uri=lb://BE-AGSmartCommunication-Application
spring.cloud.gateway.routes[3].predicates[0]=Path=/communication/**
#spring.cloud.gateway.routes[3].filters[0]=StripPrefix=1

#service implementation Auction with apiGateway
spring.cloud.gateway.routes[4].id=BE-AGSmartAuction-Application
spring.cloud.gateway.routes[4].uri=lb://BE-AGSmartAuction-Application
spring.cloud.gateway.routes[4].predicates[0]=Path=/auction/**

#service implementation CMS with apiGateway
spring.cloud.gateway.routes[5].id=BE-AGSmartContentManagementSystem-Application
spring.cloud.gateway.routes[5].uri=lb://BE-AGSmartContentManagementSystem-Application
spring.cloud.gateway.routes[5].predicates[0]=Path=/cms/**


                          
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins="*"
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods[0]="*"
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowed-headers[0]="*"
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allow-credentials=true

spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,OPTIONS,DELETE
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowCredentials=false
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowed-headers=*
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOriginPatterns=*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOriginPatterns=*



#okta implementation with apiGateway....
okta.oauth2.issuer=https://dev-45573536.okta.com/oauth2/default
okta.oauth2.audience=api://default
okta.oauth2.client-id=0oa9qmkbuvpZ85EXn5d7
#okta.oauth2.client-secret=amqVHwPo5f0csiUObvrrb-XBpv_hCfWIcLtNN7Co
okta.oauth2.scopes=openid, profile, email, offline_access

#logger impl with apigateway
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=ERROR
logging.level.net.guides=DEBUG

logging.file=myapp.log
spring.main.allow-bean-defination-overriding=true

